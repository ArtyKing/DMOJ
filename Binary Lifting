#include <bits/stdc++.h>
using namespace std;
#define INF 0x3f3f3f3f
#define LINF 0x3f3f3f3f3f3f3f3f
#define endl "\n"
#define pb push_back
#define set(a, b) memset(a, b, sizeof(a));
#define TRACE(x) cerr << #x << " = " << x << endl
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
const int maxN = 6001, mod = 1e9+7, LOG = 14;

vector<pii> adj[maxN];
int depth[maxN], uwdepth[maxN], lca[LOG][maxN];
void dfs(int cur, int prev){
    lca[0][cur] = prev;
    for(auto nxt:adj[cur]){
        if(nxt.first == prev) continue;
        depth[nxt.first] = depth[cur]+nxt.second;
        uwdepth[nxt.first] = uwdepth[cur]+1;
        dfs(nxt.first, cur);
    }
}
inline int LCA(int u, int v){
    if(uwdepth[u] < uwdepth[v]){
        swap(u, v);
    }
    for(int i = LOG-1; i >= 0; i--){
        if(uwdepth[lca[i][u]] >= uwdepth[v]){ //if(lca[i][u] != -1 && depth[lca[i][u]] >= depth[v]){ when its index by 1 - careful!
            u = lca[i][u];
        }
    }
    if(u==v) return u;
    for(int i = LOG-1; i >= 0; i--){
        if(lca[i][u] != lca[i][v]){
            u = lca[i][u];
            v = lca[i][v];
        }
    }
    return lca[0][u];
}
int32_t main(void) {
    cin.tie(0)->sync_with_stdio(0);
    int n; cin >> n;
    for(int i = 0; i < n-1; i++){
        int a, b, w; cin >> a >> b >> w;
        adj[a].pb({b, w});
        adj[b].pb({a, w});
    }
    dfs(0, -1);
    for(int i = 1; i < LOG; i++){
        for(int j = 0; j < n; j++){
            int prv = lca[i-1][j];
            if(prv != -1) lca[i][j] = lca[i-1][prv];
            else lca[i][j] = -1;
        }
    }
    //Replace with following if node index 1
//    for(int i = 1; i < LOG; i++){
//        for(int j = 1; j <= n; j++){
//            int prv = lca[i-1][j];
//            if(prv != -1) lca[i][j] = lca[i-1][prv];
//        }
//    }
    int q; cin >> q;
    while(q--){
        int a, b; cin >> a >> b;
        cout << depth[a]+depth[b]-2*depth[LCA(a, b)] << endl;
    }
}
